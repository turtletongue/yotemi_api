// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["filteredRelationCount", "views"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_CONNECTION")
}

model Admin {
  id                     String             @id @default(uuid())
  username               String             @unique
  password               String
  createdAt              DateTime           @default(now())
  updatedAt              DateTime           @updatedAt

  @@map("admins")
}

model User {
  id                     String             @id @default(uuid())
  username               String             @unique
  accountAddress         String             @unique
  authId                 String
  firstName              String
  lastName               String
  biography              String             @default("")
  avatarPath             String?
  coverPath              String?
  isVerified             Boolean            @default(false)
  topics                 Topic[]
  feedbacks              Review[]           @relation(name: "reviewOfUser")
  reviews                Review[]           @relation(name: "reviewFromUser")
  followers              Subscription[]     @relation(name: "followers")
  following              Subscription[]     @relation(name: "following")
  ownInterviews          Interview[]        @relation(name: "ownInterviews")
  interviews             Interview[]        @relation(name: "interviews")
  messages               InterviewMessage[]
  notifications          Notification[]
  notificationViews      NotificationView[]
  isBlocked              Boolean            @default(false)
  createdAt              DateTime           @default(now())
  updatedAt              DateTime           @updatedAt

  @@map("users")
}

model Subscription {
  follower               User               @relation(fields: [followerId], references: [id], onDelete: Cascade, name: "following")
  followerId             String
  following              User               @relation(fields: [followingId], references: [id], onDelete: Cascade, name: "followers")
  followingId            String
  createdAt              DateTime           @default(now())
  updatedAt              DateTime           @updatedAt

  @@id([followerId, followingId])
  @@map("subscriptions")
}

model Topic {
  id                     String             @id @default(uuid())
  labels                 TopicLabel[]
  colorHex               String             @db.VarChar(6)
  isModerated            Boolean
  users                  User[]
  createdAt              DateTime           @default(now())
  updatedAt              DateTime           @updatedAt

  @@map("topics")
}

model TopicLabel {
  id                     String             @id @default(uuid())
  value                  String
  language               Language
  topic                  Topic              @relation(fields: [topicId], references: [id], onDelete: Cascade)
  topicId                String
  createdAt              DateTime           @default(now())
  updatedAt              DateTime           @updatedAt

  @@map("topic_labels")
}

enum Language {
  en
  ru
}

model Interview {
  id                     String             @id @default(uuid())
  address                String             @unique
  price                  Decimal            @db.Decimal(30, 18)
  startAt                DateTime
  endAt                  DateTime
  creator                User               @relation(fields: [creatorId], references: [id], name: "ownInterviews", onDelete: Cascade)
  creatorId              String
  creatorPeerId          String             @default(uuid())
  participant            User?              @relation(fields: [participantId], references: [id], name: "interviews", onDelete: SetNull)
  participantId          String?
  participantPeerId      String             @default(uuid())
  payerComment           String?
  isDeployed             Boolean            @default(false)
  messages               InterviewMessage[]
  createdAt              DateTime           @default(now())
  updatedAt              DateTime           @updatedAt

  @@map("interviews")
}

model InterviewMessage {
  id                     String             @id @default(uuid())
  content                String
  author                 User?              @relation(fields: [authorId], references: [id], onDelete: SetNull)
  authorId               String?
  interview              Interview          @relation(fields: [interviewId], references: [id], onDelete: Cascade)
  interviewId            String
  createdAt              DateTime           @default(now())
  updatedAt              DateTime           @updatedAt

  @@map("interview_messages")
}

model Review {
  id                     String             @id @default(uuid())
  points                 Int
  comment                String
  user                   User               @relation(fields: [userId], references: [id], name: "reviewOfUser", onDelete: Cascade)
  userId                 String
  reviewer               User               @relation(fields: [reviewerId], references: [id], name: "reviewFromUser", onDelete: Cascade)
  reviewerId             String
  isModerated            Boolean            @default(false)
  createdAt              DateTime           @default(now())
  updatedAt              DateTime           @updatedAt

  @@map("reviews")
}

model Notification {
  id                     String             @id @default(uuid())
  type                   NotificationType
  content                Json?
  user                   User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId                 String
  views                  NotificationView[]
  createdAt              DateTime           @default(now())
  updatedAt              DateTime           @updatedAt

  @@map("notifications")
}

enum NotificationType {
  interviewStarted
  interviewScheduled
  newFollower
}

model NotificationView {
  id                     String             @id @default(uuid())
  notification           Notification       @relation(fields: [notificationId], references: [id], onDelete: Cascade)
  notificationId         String
  viewer                 User?              @relation(fields: [viewerId], references: [id], onDelete: SetNull)
  viewerId               String?
  createdAt              DateTime           @default(now())
  updatedAt              DateTime           @updatedAt

  @@map("notification_views")
}

view UserInfo {
  id                     String             @unique
  username               String
  accountAddress         String
  authId                 String
  firstName              String
  lastName               String
  biography              String
  avatarPath             String?
  coverPath              String?
  isVerified             Boolean
  isBlocked              Boolean
  createdAt              DateTime
  updatedAt              DateTime
  reviewsCount           BigInt
  averagePoints          Decimal @db.Decimal
  interviewsCount        BigInt
  topicsIds              String[]
  confidenceNumber       Float
  contentWeight          Float
}
